// File manager module
alias functionNum R1;
alias currentPID R5;
currentPID = [SYSTEM_STATUS_TABLE+1];

//buffer read
if(functionNum==2)
then
	breakpoint;
	alias blockNum R2;
	alias offset R3;
	alias memAdd R4;
	alias buffNum R6;
	buffNum = blockNum % 4;
	//acquire buffer
	multipush(R2,R3,R4,R5,R6);
	R1 = 1;
	R2 = buffNum;
	R3 = currentPID;
	call MOD_0;
	multipop(R2,R3,R4,R5,R6);
	if([BUFFER_TABLE + 4*buffNum]!=blockNum) then 
		if([BUFFER_TABLE + 4*buffNum + 1]==1) then 
			//disk store
			multipush(R2,R3,R4,R5,R6);
			R4 = blockNum;
			R1 = 1;
			R2 = currentPID;
			R3 = (buffNum+71);
			call MOD_4;
			multipop(R2,R3,R4,R5,R6);	
			[BUFFER_TABLE + 4*buffNum + 1]=0;		
		endif;
		//disk load
		multipush(R2,R3,R4,R5,R6);
		R4 = blockNum;
		R1 = 2;
		R2 = currentPID;
		R3 = (buffNum+71);
		call MOD_4;
		multipop(R2,R3,R4,R5,R6);	
		[BUFFER_TABLE + 4*buffNum]=blockNum;
	endif;
	[memAdd] = [(buffNum+71) * 512 + offset];
	//release buffer
	multipush(R2,R3,R4,R5,R6);
	R1 = 2;
	R2 = buffNum;
	R3 = currentPID;
	call MOD_0;
	multipop(R2,R3,R4,R5,R6);
	breakpoint;
	return;
endif;

//open
if(functionNum==3)
then
	breakpoint;
	alias fileName R2;
	//find index of file in inode table
	alias iter R3;
	iter = 1;
	while (iter<MAX_FILE_NUM) do
		if([INODE_TABLE + 16*iter + 1] == fileName) then
			break;
		endif;
		iter = iter + 1;
	endwhile;

	//file not found - return 0
	if (iter == MAX_FILE_NUM) then
		R0 = -1;
		return; 
	endif;

	//lock the inode
	multipush(R2,R3,R5);
	R1 = 4;
	R2 = iter;
	R3 = currentPID;
	call MOD_0;
	multipop(R2,R3,R5);

	//locking failed
	if (R0 == -1) then
		return; 
	endif;

	//if file is of type EXEC 
	if([INODE_TABLE + 16*iter] == EXEC) then
		//release the inode
		multipush(R2,R3,R5);
		R1 = 5;
		R2 = iter;
		R3 = currentPID;
		call MOD_0;
		multipop(R2,R3,R5);
		R0 = -1;
		return; 
	endif;

	//find free entry in open file table
	alias freeEntry R4;
	freeEntry = 0;
	while(freeEntry<32) do
		if([OPEN_FILE_TABLE + 4*freeEntry] == -1) then
			break;
		endif;
		freeEntry = freeEntry + 1;
	endwhile;

	//no free entry - return -2
	if(freeEntry==32) then
		//release the inode
		multipush(R2,R3,R4,R5);
		R1 = 5;
		R2 = iter;
		R3 = currentPID;
		call MOD_0;
		multipop(R2,R3,R4,R5);
		R0 = -2;
		return;
	endif;

	if(fileName=="root") then
		[OPEN_FILE_TABLE + 4*freeEntry] = INODE_ROOT;
	else
		if([FILE_STATUS_TABLE + (iter*4) + 1]==-1) then
			[FILE_STATUS_TABLE + (iter*4) + 1]=1;
		else
			[FILE_STATUS_TABLE + (iter*4) + 1]=[FILE_STATUS_TABLE + (iter*4) + 1]+1;
		endif;
		[OPEN_FILE_TABLE + 4*freeEntry] = iter;
	endif;
	[OPEN_FILE_TABLE + 4*freeEntry + 1] = 1;
	[OPEN_FILE_TABLE + 4*freeEntry + 2] = 0;

	//release the inode
	multipush(R2,R3,R4,R5);
	R1 = 5;
	R2 = iter;
	R3 = currentPID;
	call MOD_0;
	multipop(R2,R3,R4,R5);

	R0 = freeEntry;
	breakpoint;
  return;
endif; 		

//close
if(functionNum==4)
then
	breakpoint;
	alias fileTableIndex R2;
	alias inodeIndex R3;

	inodeIndex = [OPEN_FILE_TABLE + 4*fileTableIndex];
	[OPEN_FILE_TABLE + 4*fileTableIndex + 1] = [OPEN_FILE_TABLE + 4*fileTableIndex + 1] - 1;

	if([OPEN_FILE_TABLE + 4*fileTableIndex + 1]==0) then
		[OPEN_FILE_TABLE + 4*fileTableIndex ] = -1;
		[OPEN_FILE_TABLE + 4*fileTableIndex + 1] = -1;
		[OPEN_FILE_TABLE + 4*fileTableIndex + 2] = -1;		

		if(inodeIndex!=INODE_ROOT) then
			[FILE_STATUS_TABLE + inodeIndex*4 +1]=[FILE_STATUS_TABLE + inodeIndex*4 +1]-1;
		endif;
		if([FILE_STATUS_TABLE + inodeIndex*4 +1]==0) then
			[FILE_STATUS_TABLE + inodeIndex*4 +1] = -1;
		endif;
	endif;
	breakpoint;
	return;
endif;