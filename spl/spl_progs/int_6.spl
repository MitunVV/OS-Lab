alias currentPID R1;
alias userSP R2;
alias sysCallNum R3;
alias proTable R4;
alias returnVal R5;
alias resTable R6;
alias fileDes R7;
alias buffer R8;
currentPID = [SYSTEM_STATUS_TABLE + 1];
proTable = PROCESS_TABLE + (currentPID * 16); 
[proTable + 13] = SP;
userSP = SP;
SP = [proTable + 11] * 512 - 1;
[proTable + 9] = 7;
returnVal = [PTBR + 2*((userSP - 1)/512)] * 512 + ((userSP - 1)%512);
resTable = [proTable +11] * 512 + RESOURCE_TABLE_OFFSET;
fileDes = [[PTBR + 2 * ((userSP - 4)/512)] * 512 + ((userSP - 4)%512)];
buffer = [[PTBR + 2 * ((userSP - 3)/512)] * 512 + ((userSP - 3)%512)];

if(fileDes==-1) then 
	//call terminal read
	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R2=currentPID;
	R1=4;
	R3=buffer;
	call MOD_4;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	[returnVal]=0;
	call ret;
else
	//invalid file descriptor
	if(fileDes<0||fileDes>7) then
		[returnVal]=-1;
		call ret;	
	endif;
	//invalid per process resource table entry
	if([resTable + 2*fileDes]!=FILE) then
		[returnVal]=-1;
		call ret;	
	endif;
	alias openFileIndex R9;
	alias inodeIndex R10;
	openFileIndex = [resTable + 2*fileDes + 1];
	inodeIndex = [OPEN_FILE_TABLE + 4*openFileIndex];
	//acquire inode
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R3=currentPID;
	R2=inodeIndex;
	R1=4;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	if(R0==-1) then
		[returnVal]=-1;
		call ret;	
	endif;
	alias lSeek R11;
	alias physicalBuffAdd R12;
	lSeek = [OPEN_FILE_TABLE + 4*openFileIndex + 2];
	physicalBuffAdd = [PTBR + 2 * (buffer/512)] * 512 + (buffer%512);
	if(inodeIndex==INODE_ROOT) then
		if(lSeek==480) then
			//release inode
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
			R3=currentPID;
			R2=inodeIndex;
			R1=5;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
			[returnVal]=-2;
			call ret;	
		endif;
		[physicalBuffAdd] = [ROOT_FILE + lSeek];
		[OPEN_FILE_TABLE + 4*openFileIndex + 2] = [OPEN_FILE_TABLE + 4*openFileIndex + 2] + 1;
	else
		if(lSeek == [INODE_TABLE + 16*inodeIndex + 2]) then
			//release inode
			multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
			R3=currentPID;
			R2=inodeIndex;
			R1=5;
			call MOD_0;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
			[returnVal]=-2;
			call ret;	
		endif;	
		//buffer read
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
		R1 = 2;
		R2 = [INODE_TABLE + 16*inodeIndex + 8 + (lSeek / 512)];
		R3 = lSeek % 512;
		R4 = physicalBuffAdd;
		call FILE_MANAGER;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);	
		[OPEN_FILE_TABLE + 4*openFileIndex + 2] = [OPEN_FILE_TABLE + 4*openFileIndex + 2] + 1;
	endif;
	//release inode
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
	R3=currentPID;
	R2=inodeIndex;
	R1=5;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
	[returnVal]=0;
	call ret;	
endif;

ret:
	[proTable + 9] = 0;
	SP = [proTable + 13];
	ireturn;