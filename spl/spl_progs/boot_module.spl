//Loads library code from disk blocks 13 and 14 to physical pages 63 and 64
loadi(63,13);
loadi(64,14);

//Loads INIT program from 7, 8 blocks to 65, 66 physical pages
loadi(65,7);
loadi(66,8);

//Loads interrupt routine 10 from 35, 36 blocks to 22, 23 physical pages
loadi(22,35);
loadi(23,36);

//Loads exception handler from 15, 16 blocks to 2, 3 physical pages
loadi(2, 15);
loadi(3, 16);

//Loads timer interrupt routine from 17, 18 blocks to 4, 5 physical pages
loadi(4, 17);
loadi(5, 18);

//Loads int 7 routine from 29, 30 blocks to 16, 17 physical pages
loadi(16,29);
loadi(17,30);

//loads exec program
//loadi(83,70);

//load module 5
loadi(50,63);
loadi(51,64);

//load module 0
loadi(40,53);
loadi(41,54);

//load module 4
loadi(48,61);
loadi(49,62);

// INT 6

loadi(14,27);
loadi(15,28);

// Console Interrupt

loadi(8,21);
loadi(9,22);

// INT 9

loadi(20,33);
loadi(21,34);

// load module 1

loadi(42,55);
loadi(43,56);

// load module 2

loadi(44,57);
loadi(45,58);

// Inode Table

loadi(59,3);
loadi(60,4);

//Disk Interrupt Handler

loadi(6, 19);
loadi(7, 20);

//disk free list
loadi(61,2);

//Load Interrupt 8
loadi(18, 31);
loadi(19, 32);

// INT 11
loadi(24, 37);
loadi(25, 38);

// INT 15
loadi(32, 45);
loadi(33, 46);

// INT 13
loadi(28, 41);
loadi(29, 42);

// INT 14
loadi(30, 43);
loadi(31, 44);

// INT 4
loadi(10, 23);
loadi(11, 24);

//Root File
loadi(62, 5);

//load module 3 
loadi(46, 59);
loadi(47, 60);

// INT 5
loadi(12, 25);
loadi(13, 26);

[DISK_STATUS_TABLE] = 0;

alias counter R0;
counter = 76;
while(counter <= 82) do
	[MEMORY_FREE_LIST + counter] = 1;
	counter = counter + 1;
endwhile;

while(counter <= 127) do
	[MEMORY_FREE_LIST + counter] = 0;
	counter = counter + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 127 - 82;

//Terminal status table's STATUS field is set to 0
[TERMINAL_STATUS_TABLE+0]=0;

// Setting Page Table entry for init program
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";
//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//Process table for init
// Setting PID to 1
[PROCESS_TABLE + (16 * 1) + 1] = 1;
// Setting USERID to ROOT
[PROCESS_TABLE + (16 * 1) + 3] = ROOT;
// Flag is set to created
[PROCESS_TABLE + (16 * 1) + 4] = CREATED;
//Setting User page area to 80
[PROCESS_TABLE + (16 * 1) + 11] = 80;
//Setting KPTR to 0
[PROCESS_TABLE + (16 * 1) + 12] = 0;
//Setting UPTR to 8*512
[PROCESS_TABLE + (16 * 1) + 13] = 8 * 512;
//Setting PTBR
[PROCESS_TABLE + (16 * 1) + 14] = PTBR;
//Setting PTLR
[PROCESS_TABLE + (16 * 1) + 15] = 10;

//Disk map table entries for init process
[DISK_MAP_TABLE+ 10 ] = -1;
[DISK_MAP_TABLE+ 10 + 1] = -1;
[DISK_MAP_TABLE+ 10 + 2] = -1;
[DISK_MAP_TABLE+ 10 + 3] = -1;
[DISK_MAP_TABLE+ 10 + 4] =  7;
[DISK_MAP_TABLE+ 10 + 5] =  8;
[DISK_MAP_TABLE+ 10 + 6] = -1;
[DISK_MAP_TABLE+ 10 + 7] = -1;
[DISK_MAP_TABLE+ 10 + 8] = -1;
[DISK_MAP_TABLE+ 10 + 9] = -1;

// // Setting Page Table entry for exec program
// PTBR = PAGE_TABLE_BASE + 40;
// PTLR = 10;
// //Library
// [PTBR+0] = 63;
// [PTBR+1] = "0100";
// [PTBR+2] = 64;
// [PTBR+3] = "0100";
// //Heap
// [PTBR+4] = 84;
// [PTBR+5] = "0110";
// [PTBR+6] = 85;
// [PTBR+7] = "0110";
// //Code
// [PTBR+8] = 83;
// [PTBR+9] = "0100";
// [PTBR+10] = -1;
// [PTBR+11] = "0100";
// [PTBR+12] = -1;
// [PTBR+13] = "0000";
// [PTBR+14] = -1;
// [PTBR+15] = "0000";
// //Stack
// [PTBR+16] = 86;
// [PTBR+17] = "0110";
// [PTBR+18] = 87;
// [PTBR+19] = "0110";



// //Process table for exec
// // Setting PID to 2
// [PROCESS_TABLE + (16 * 2) + 1] = 2;
// // Flag is set to created
// [PROCESS_TABLE + (16 * 2) + 4] = CREATED;
// //Setting User page area to 88
// [PROCESS_TABLE + (16 * 2) + 11] = 88;
// //Setting KPTR to 0
// [PROCESS_TABLE + (16 * 2) + 12] = 0;
// //Setting UPTR to 8*512
// [PROCESS_TABLE + (16 * 2) + 13] = 8 * 512;
// //Setting PTBR
// [PROCESS_TABLE + (16 * 2) + 14] = PTBR;
// //Setting PTLR
// [PROCESS_TABLE + (16 * 2) + 15] = 10;

// Setting Per-Process resource Table for init, UAPage: 80
alias perProcessCounter R1;
perProcessCounter = 0;
while (perProcessCounter < 16) do
    [80* 512 + RESOURCE_TABLE_OFFSET + perProcessCounter] = -1;
    perProcessCounter = perProcessCounter + 2;
endwhile;

// Initializing File Status Table
alias index R2;
index = 0;
while(index < MAX_FILE_NUM) do
    [FILE_STATUS_TABLE + 4 * index] = -1;
    [FILE_STATUS_TABLE + 4 * index + 1] = -1;
    index = index + 1;
endwhile;

// Initialize Buffer Table
index = 0;
while (index < MAX_BUFFER) do
    [BUFFER_TABLE + (index * 4)] = -1;
    [BUFFER_TABLE + (index * 4) + 1] = 0;
    [BUFFER_TABLE + (index * 4) + 2] = -1;
    index = index + 1;
endwhile;

// Initializing Semaphore Table
index = 0;
while(index < 32) do
    [SEMAPHORE_TABLE + 4 * index] = -1;
    [SEMAPHORE_TABLE + 4 * index + 1] = 0;
    index = index + 1;
endwhile;

// Initializing Open File Table
index = 0;
while(index < 32) do
    [OPEN_FILE_TABLE + 4 * index] = -1;
    [OPEN_FILE_TABLE + 4 * index + 1] = 0;
    index = index + 1;
endwhile;

//Setting entry point for init
[76*512] = [65*512 + 1];

//Setting entry point for exec
//[86*512] = [83*512 + 1];

//Initialize all states as terminated except for the first 2
counter = 2;
while(counter <= 15) do
  [PROCESS_TABLE + (counter * 16) + 4] = TERMINATED;
  counter = counter + 1;
endwhile; 

return;