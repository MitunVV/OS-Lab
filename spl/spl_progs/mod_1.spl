alias funcNum R1;
alias currPID R2;

if(funcNum == 2) then //Free User Area Page
	alias resTable R3;
	alias iter R4;
	resTable = [PROCESS_TABLE + (currPID * 16) + 11] * 512 + 496;
	iter = 0;
	while(iter < 8) do
		if([resTable] == 1) then
			multipush(R1,R2,R3,R4);			
			R1 = 7;
			R3 = currPID;
			R2 = [resTable + 1];			
			call RESOURCE_MANAGER;			
			multipop(R1,R2,R3,R4);
		endif;
		[resTable] = -1;
		iter = iter + 1;
	endwhile;
	multipush(R1,R2);
	R1 = 2;
	R2 = [PROCESS_TABLE + currPID*16 + 11];
	call MOD_2;
	multipop(R1,R2);
	return;
endif;
if(funcNum == 3) then
	if ([PROCESS_TABLE + (currPID * 16) + 9] != 9) then
		alias pidIter R3;
		pidIter = 1;
		while (pidIter < 16) do
			if ([PROCESS_TABLE + (pidIter * 16) + 4] == WAIT_PROCESS && [PROCESS_TABLE + (pidIter * 16) + 5] == currPID) then
				[PROCESS_TABLE + (pidIter * 16) + 4] = READY;
				[PROCESS_TABLE + (pidIter * 16) + 5] = -1;
			endif;
			if ([PROCESS_TABLE + (pidIter * 16) + 2] == currPID) then
				[PROCESS_TABLE + (pidIter * 16) + 2] = -1;
			endif;
			pidIter = pidIter + 1;
		endwhile;
	endif;

	multipush(R1,R2);
	R1 = 4;
	R2 = currPID;
	call MOD_1;	
	multipop(R1,R2);
	multipush(R1,R2);
	R1 = 2;
	R2 = currPID;
	call MOD_1;
	multipop(R1,R2);
	[PROCESS_TABLE + (currPID * 16) + 4] = TERMINATED;
	return;
endif;

if(funcNum == 4) then
	PTBR = PAGE_TABLE_BASE + currPID*20;
	//Invalidate all library pages
	[PTBR + 0] = -1;
	[PTBR + 1] = "0000";
	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";
	alias iter R3;
	iter = 4;
	//free all other page table entries
	while(iter < 20) do
			if([PTBR + iter] != -1) then
					multipush(R1, R2, R3);
					R1 = 2;
					R2 = [PTBR + iter];
					call MOD_2;
					multipop(R1, R2, R3);
					[PTBR + iter]=-1;
					[PTBR + iter + 1]="0000";
			endif;
			iter = iter + 2;
	endwhile;

	//Invalidate disk map table
	alias blockNum R4;
	iter = 2;
	[DISK_MAP_TABLE + 10*currPID ] = -1;
	[DISK_MAP_TABLE + 10*currPID + 1] = -1;
	while(iter < 10) do
		// if heap or stack release the block
		if(iter < 4 && iter > 7) then
				blockNum = [DISK_MAP_TABLE + 10*currPID + iter];
				if(blockNum!=-1) then
					multipush(R1, R2, R3, R4);
					R1 = 4;
					R2 = blockNum;
					R3 = currPID;
					call MOD_2;
					multipop(R1, R2, R3, R4);
				endif;				
		endif;
		[DISK_MAP_TABLE + 10*currPID + iter] = -1;
		iter = iter + 1;
	endwhile;
	return;
endif;

//Get PcB Entry
if(funcNum==1) then
	alias indexCounter R7;
	indexCounter = 0;
	while(indexCounter < 16) do
		if([PROCESS_TABLE + indexCounter*16 + 4] == TERMINATED) then
			break;
		endif;
		indexCounter = indexCounter + 1;
	endwhile;
	if(indexCounter == 16) then
		R0 = -1;
		return;
	endif;
	[PROCESS_TABLE + indexCounter*16 + 4] = ALLOCATED;
	[PROCESS_TABLE + indexCounter*16 + 1] = indexCounter;
	[PROCESS_TABLE + indexCounter*16 + 14] = PAGE_TABLE_BASE + indexCounter*20;
	[PROCESS_TABLE + indexCounter*16 + 15] = 10;
	R0 = indexCounter;
	return;
endif;